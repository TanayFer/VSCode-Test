R Commands for Beginners - A Quick Guide
=========================================

This guide explains the basic R commands you've used. R is a language for statistics and data analysis. Think of these commands as instructions you give to the computer.


---
COMMAND: = or <- (Assignment)
-----------------------------
Purpose: To store a value (like a number or text) in a variable. A variable is like a named box where you keep information. The arrow `<-` is the most common way to do this in R.

Example:
# This stores the number 25 in a box named 'my_age'
my_age = 25

# This stores the text "John" in a box named 'my_name'
my_name <- "John"


---
COMMAND: c() (Combine or Create a Vector)
-----------------------------------------
Purpose: To create a list of items. In R, a list of items is called a "vector". The `c` stands for "combine".

Example:
# Creates a list of numbers
my_scores = c(85, 92, 78, 95)

# Creates a list of names
friends = c("Tanay", "Anish", "Shreya")


---
COMMAND: rep() (Repeat)
------------------------
Purpose: To repeat an item or a list of items multiple times.

Example:
# Repeats the number 1 five times
rep(1, 5)

# Repeats the word "hello" three times
rep("hello", 3)


---
COMMAND: : (Colon for Sequences)
--------------------------------
Purpose: To create a simple sequence of numbers that increases by 1.

Example:
# Creates numbers from 1 to 5
1:5

# Creates numbers from 10 to 15
10:15


---
COMMAND: seq() (Sequence)
--------------------------
Purpose: To create more complex sequences where you can control the start, end, and the "step" (the amount to jump by).

Example:
# Creates a sequence from 0 to 10, jumping by 2
seq(from=0, to=10, by=2)


---
COMMAND: length()
------------------
Purpose: To count how many items are in a vector.

Example:
my_list = c(10, 20, 30, 40)
length(my_list)  # The result will be 4


---
COMMAND: typeof() and is.numeric()
-----------------------------------
Purpose: To check what type of data is inside a variable.
`typeof()` tells you the exact storage type.
`is.numeric()` asks a TRUE/FALSE question: "Is this data a number?"

Example:
my_number = 100
my_text = "one hundred"

typeof(my_number)       # Result: "double" (R's term for a number)
typeof(my_text)         # Result: "character" (R's term for text)

is.numeric(my_number)   # Result: TRUE
is.numeric(my_text)     # Result: FALSE


---
COMMAND: matrix()
------------------
Purpose: To arrange a vector of data into a grid with rows and columns.

Example:
# First, create a vector of data
all_numbers = 1:6  # This gives us 1, 2, 3, 4, 5, 6

# Now, arrange it into a 2x3 matrix (2 rows, 3 columns)
my_matrix = matrix(all_numbers, nrow=2, ncol=3)


---
COMMAND: [] (Square Brackets for Subsetting)
--------------------------------------------
Purpose: To get specific data out of a vector or matrix. For matrices, the format is `[row, column]`.

Example:
# Using the my_matrix from above:
# my_matrix looks like:
#      [,1] [,2] [,3]
# [1,]    1    3    5
# [2,]    2    4    6

my_matrix[1, 3]  # Gets the item in the 1st row, 3rd column. Result: 5
my_matrix[2, ]   # Gets the ENTIRE 2nd row. Result: 2, 4, 6
my_matrix[, 1]   # Gets the ENTIRE 1st column. Result: 1, 2


---
COMMAND: dim() (Dimensions)
---------------------------
Purpose: To find out the dimensions (how many rows and columns) a matrix has.

Example:
dim(my_matrix)  # Result: 2 3 (meaning 2 rows and 3 columns)


---
COMMAND: rbind() and cbind() (Row Bind and Column Bind)
-------------------------------------------------------
Purpose: To add new rows or columns to a matrix.
`rbind` adds a new row to the bottom.
`cbind` adds a new column to the right side.

Example:
# Let's use our 2x3 my_matrix
new_row = c(7, 8, 9)
matrix_with_new_row = rbind(my_matrix, new_row)

new_column = c(10, 20)
matrix_with_new_column = cbind(my_matrix, new_column)